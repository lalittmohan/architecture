
type Query {
    categoryList(
        filters: CategoryFilterInput @doc(description: "Identifies which Category filter inputs to search for and return.")
    ): [CategoryTree] @doc(description: "Categories tree.")

    categories(
        filters: CategoryFilterInput @doc(description: "Identifies which Category filter inputs to search for and return.")
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional.")
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1.")
    ): CategoryResult
}

input CategoryFilterInput  @doc(description: "CategoryFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for.")
{
    ids: FilterEqualTypeInput @doc(description: "Filter by category ID that uniquely identifies and filters the category.")
    url_key: FilterEqualTypeInput @doc(description: "Filter by the part of the URL that identifies the category.")
    name: FilterMatchTypeInput @doc(description: "Filter by the display name of the category.")
    url_path: FilterEqualTypeInput @doc(description: "Filter by the URL path for the category.")
    path: FilterMatchTypeInput @doc(description: "Filter by category path.")
    canonical_url: FilterEqualTypeInput @doc(description: "Filter by canonical URL of the category.")
}

type CategoryResult @doc(description: "Collection of CategoryTree object and pagination information.") {
    items: [CategoryTree] @doc(description: "List of categories that match filter criteria.")
    page_info: SearchResultPageInfo @doc(description: "An object that includes the page_info and currentPage values specified in the query.")
    total_count: Int @doc(description: "The total number of categories that match the criteria.")
}
