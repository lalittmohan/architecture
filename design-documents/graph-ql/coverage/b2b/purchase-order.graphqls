type Mutation {
    addPurchaseOrderComment(input: AddPurchaseOrderCommentInput!): AddPurchaseOrderCommentOutput @doc(description: "Add a comment to an existing purchase order")
    validatePurchaseOrder(input: ValidatePurchaseOrderInput!): ValidatePurchaseOrderOutput @doc(description: "Validate purchase order")
    approvePurchaseOrder(input: ApprovePurchaseOrderInput!): ApprovePurchaseOrderOutput @doc(description: "Approve purchase order")
    cancelPurchaseOrder(input: CancelPurchaseOrderInput!): CancelPurchaseOrderOutput @doc(description: "Cancel purchase order")
    rejectPurchaseOrder(input: RejectPurchaseOrderInput!): RejectPurchaseOrderOutput @doc(description: "Reject purchase order")
    createPurchaseOrderApprovalRule(input: CreatePurchaseOrderApprovalRuleInput!): CreatePurchaseOrderApprovalRuleOutput @doc(description: "Create purchase order approval rule")
    updatePurchaseOrderApprovalRule(input: UpdatePurchaseOrderApprovalRuleInput!): UpdatePurchaseOrderApprovalRuleOutput @doc(description: "Update existing purchase order approval rule")
    deletePurchaseOrderApprovalRule(input: DeletePurchaseOrderApprovalRuleInput!): DeletePurchaseOrderApprovalRuleOutput @doc(description: "Delete existing purchase order approval rule")
}

type CreatePurchaseOrderApprovalRuleOutput {
    approval_rule: PurchaseOrderApprovalRule @doc(description: "Created purchase order approval rule")
    approval_rules(currentPage: Int = 1, pageSize: Int = 20): PurchaseOrderApprovalRules @doc(description: "A list of purchase order approval rules visible to the customer")
}

type UpdatePurchaseOrderApprovalRuleOutput {
    approval_rule: PurchaseOrderApprovalRule @doc(description: "Updated purchase order approval rule")
    approval_rules(currentPage: Int = 1, pageSize: Int = 20): PurchaseOrderApprovalRules @doc(description: "A list of purchase order approval rules visible to the customer")
}

type DeletePurchaseOrderApprovalRuleOutput {
    approval_rules(currentPage: Int = 1, pageSize: Int = 20): PurchaseOrderApprovalRules @doc(description: "A list of purchase order approval rules visible to the customer")
}

input CreatePurchaseOrderApprovalRuleInput {
    approval_rule: PurchaseOrderApprovalRuleInput! @doc(description: "Purchase order approval rule data")
}

input UpdatePurchaseOrderApprovalRuleInput {
    approval_rule_uid: ID! @doc(description: "Purchase order approval rule ID")
    approval_rule: PurchaseOrderApprovalRuleInput! @doc(description: "Purchase order approval rule data")
}

input DeletePurchaseOrderApprovalRuleInput {
    approval_rule_uid: ID! @doc(description: "Purchase order approval rule ID")
}

input PurchaseOrderApprovalRuleInput {
    name: String! @doc(description: "Purchase order approval rule name")
    description: String @doc(description: "Purchase order approval rule description")
    applies_to: [ID!]! @doc(description: "A list of B2B user roles to which this purchase order approval rule should be applied. In case when empty array is provided, the rule will be applied to all user roles in the system, including those created in the future")
    type: PurchaseOrderApprovalRuleType! @doc(description: "Purchase order approval rule type")
    status: PurchaseOrderApprovalRuleStatus! @doc(description: "Purchase order approval rule status")
    condition: CreatePurchaseOrderApprovalRuleConditionInput! @doc(description: "Purchase order approval rule condition")
    requires_approval_from: [ID!]! @doc(description: "A list of B2B user roles that can approve this purchase order approval rule")
}

input CreatePurchaseOrderApprovalRuleConditionInput {
    operator: PurchaseOrderApprovalRuleConditionOperator! @doc(description: "Purchase order approval rule condition operator")
    amount: CreatePurchaseOrderApprovalRuleConditionAmountInput @doc(description: "Purchase order approval rule condition ammount. Is mutually exclusive with condition quantity")
    quantity: Int @doc(description: "Purchase order approval rule condition quantity. Is mutually exclusive with condition amount")
}

input CreatePurchaseOrderApprovalRuleConditionAmountInput {
    value: Float! @doc(description: "Purchase order approval rule condition ammount value")
    currency: CurrencyEnum! @doc(description: "Purchase order approval rule condition ammount currency")
}

input ValidatePurchaseOrderInput {
    purchase_order_uid: ID!
}

type ValidatePurchaseOrderOutput {
    purchase_order: PurchaseOrder
}

input ApprovePurchaseOrderInput {
    purchase_order_uid: ID!
}

type ApprovePurchaseOrderOutput {
    purchase_order: PurchaseOrder
}

input CancelPurchaseOrderInput {
    purchase_order_uid: ID!
}

type CancelPurchaseOrderOutput {
    purchase_order: PurchaseOrder
}

input RejectPurchaseOrderInput {
    purchase_order_uid: ID!
}

type RejectPurchaseOrderOutput {
    purchase_order: PurchaseOrder
}

input AddPurchaseOrderCommentInput {
    purchase_order_uid: ID!
    comment: String!
}

type AddPurchaseOrderCommentOutput {
    purchase_order: PurchaseOrder
    comment: PurchaseOrderComment
}

type Customer {
    purchase_orders(filter: PurchaseOrdersFilterInput, currentPage: Int = 1, pageSize: Int = 20): PurchaseOrders @doc(description: "A list of purchase orders visible to the customer")
    purchase_order(uid: ID!): PurchaseOrder @doc(description: "Purchase order details")
    purchase_order_approval_rules(currentPage: Int = 1, pageSize: Int = 20): PurchaseOrderApprovalRules @doc(description: "A list of purchase order approval rules visible to the customer")
    purchase_order_approval_rule(uid: ID!): PurchaseOrderApprovalRule @doc(description: "Purchase order approval rule details")
    purchase_order_approval_rule_metadata: PurchaseOrderApprovalRuleMetadata @doc(description: "Purchase order approval rule metadata which is can be used for rule edit form rendering")
    purchase_orders_enabled: Boolean! @doc(description: "Whether purchase orders functionality is enabled for current customer. Takes into account global and company-level settings")
}

type PurchaseOrderApprovalRuleMetadata {
    available_applies_to: [CompanyRole]! @doc(description: "A list of B2B user roles that the rule can be applied to")
    available_condition_currencies: [CurrencyEnum]! @doc(description: "A list of currencies that can be used to create approval rules based on ammounts, for example shipping cost rules")
    available_requires_approval_from: [CompanyRole]! @doc(description: "A list of B2B user roles that can be specified as approvers for the approval rules")
}

input PurchaseOrdersFilterInput {
    status: PurchaseOrderStatus @doc(description: "Filter by the status of the purchase order")
    createdBy: FilterStringTypeInput @doc(description: "Filter by the name of the user who created the purchase order")
    createdDate: FilterRangeTypeInput @doc(description: "Filter by the creation date of the purchase order")
}

type PurchaseOrders {
    items: [PurchaseOrder]!
    page_info: SearchResultPageInfo
    total_count: Int
}

type PurchaseOrderApprovalRules {
    items: [PurchaseOrderApprovalRule]!
    page_info: SearchResultPageInfo
    total_count: Int
}

type PurchaseOrderApprovalRule {
    uid: ID! @doc(description: "Unique identifier for the purcahse order approval rule")
    name: String! @doc(description: "Name of the purcahse order approval rule")
    status: PurchaseOrderApprovalRuleStatus! @doc(description: "Status of the purcahse order approval rule")
    type: PurchaseOrderApprovalRuleType! @doc(description: "Type of the purcahse order approval rule")
    created_by: String! @doc(description: "The name of the user who created the purcahse order approval rule")
    applies_to: String! @doc(description: "The name of the user(s) affected by the the purcahse order approval rule")
    approver: String! @doc(description: "The name of the user who needs to approve purchase orders that trigger the approval rule")
    condition: PurchaseOrderApprovalRuleConditionInterface! @doc(description: "Condition which triggers the approval rule")
}

interface PurchaseOrderApprovalRuleConditionInterface {
    operator: PurchaseOrderApprovalRuleConditionOperator! @doc(description: "The operator to be used for evaluation of the approval rule condition")
}

enum PurchaseOrderApprovalRuleConditionOperator {
    MORE_THAN
    LESS_THAN
    MORE_THAN_OR_EQUAL_TO
    LESS_THAN_OR_EQUAL_TO
}

type PurchaseOrderApprovalRuleConditionAmount implements PurchaseOrderApprovalRuleConditionInterface {
    amount: Money! @doc(description: "The amount to be be used for evaluation of the approval rule condition")
}

type PurchaseOrderApprovalRuleConditionQuantity implements PurchaseOrderApprovalRuleConditionInterface {
    quantity: Int! @doc(description: "The quantity to be be used for evaluation of the approval rule condition")
}

enum PurchaseOrderApprovalRuleStatus {
    ENABLED
    DISABLED
}

enum PurchaseOrderApprovalRuleType {
    ORDER_TOTAL
    SHIPPING_COST
    NUMBER_OF_SKUS
}

type PurchaseOrder {
    uid: ID! @doc(description: "Unique identifier for the purcahse order")
    number: String! @doc(description: "The purchase order number")
    order: CustomerOrder @doc(description: "The reference to the order placed based on the purchase order")
    purchase_order_date: String! @doc(description: "The date the purchase order was created")
    created_by: String! @doc(description: "The name of the user who created the purchase order")
    status: PurchaseOrderStatus! @doc(description: "The current status of the purcahse order")
    total: PurchaseOrderTotal @doc(description: "Contains details about the calculated totals for the purchase order")
    comments(currentPage: Int = 1, pageSize: Int = 20): PurchaseOrderComments @doc(description: "Purchase order comments")
    payment_methods: [PaymentMethod] @doc(description: "Payment details for the purchase order")
    shipping_address: CustomerAddress @doc(description: "The shipping address for the purchase order")
    billing_address: CustomerAddress @doc(description: "The billing address for the purchase order")
    carrier: String @doc(description: "The shipping carrier for the purchase order delivery")
    shipping_method: String @doc(description: "The delivery method for the purchase order")
    items(currentPage: Int = 1, pageSize: Int = 20): PurchaseOrderItems @doc(description: "Items that belong to the purchase order")
    history_log(currentPage: Int = 1, pageSize: Int = 20): PurchaseOrderHistoryLog @doc(description: "The log of the events related to the purchase order")
    approval_flow: PurchaseOrderApprovalFlow @doc(description: "The log of the events related to the purchase order approval flow")
    available_actions: [PurchaseOrderAction] @doc(description: "Purcahse order actions available to the customer. Can be used to display action buttons on the client")
}

enum PurchaseOrderAction {
    REJECT
    CANCEL
    VALIDATE
    APPROVE
}

type PurchaseOrderApprovalFlow {
    items: [PurchaseOrderApprovalFlowItem]!
}

type PurchaseOrderApprovalFlowItem {
    uid: ID! @doc(description: "Unique identifier of the purchase order flow item.")
    title: String! @doc(description: "Summary of the event related to purchase order approval flow")
    description: String! @doc(description: "Description of the event related to purchase order approval flow")
    status: PurchaseOrderApprovalFlowItemStatus! @doc(description: "Status associated with the event related to purchase order approval flow")
}

enum PurchaseOrderApprovalFlowItemStatus {
    PENDING
    APPROVED
    REJECTED
}

type PurchaseOrderComments {
    items: [PurchaseOrderComment]!
    page_info: SearchResultPageInfo
    total_count: Int!
}

type PurchaseOrderComment {
    uid: ID! @doc(description: "Unique identifier of the comment.")
    created_at: String! @doc(description: "The date and time when the comment was created")
    author: PurchaseOrderCommentAuthor! @doc(description: "The name of the user who left the comment")
    text: String! @doc(description: "The text of the comment")
}

type PurchaseOrderCommentAuthor {
    firstname: String! @doc(description: "First name of the user who left the purchase order comment")
    lastname: String! @doc(description: "Last name of the user who left the purchase order comment")
}

type PurchaseOrderHistoryLog {
    items: [PurchaseOrderHistoryItem]!
    page_info: SearchResultPageInfo
    total_count: Int
}

type PurchaseOrderHistoryItem {
    uid: ID! @doc(description: "Unique identifier of the purchase rder history item.")
    created_at: String! @doc(description: "The date and time when the event happened.")
    description: String! @doc(description: "Description of the event.")
}

type PurchaseOrderItems {
    items: [PurchaseOrderItemInterface]!
    page_info: SearchResultPageInfo
    total_count: Int!
}

type PurchaseOrderTotal @doc(description: "Contains details about the sales total amounts used to calculate the final price") {
    subtotal: Money! @doc(description: "The subtotal of the purchase order, excluding shipping, discounts, and taxes")
    discounts: [Discount] @doc(description: "The applied discounts to the purchase order")
    estimated_total_tax: Money! @doc(description: "The amount of tax applied to the purchase order")
    estimated_taxes: [TaxItem] @doc(description: "The purchase order tax details")
    grand_total: Money! @doc(description: "The final total amount, including shipping, discounts, and taxes")
    base_grand_total: Money! @doc(description: "The final base grand total amount in the base currency")
    total_shipping: Money! @doc(description: "The shipping amount for the order")
    shipping_handling: ShippingHandling @doc(description: "Contains details about the shipping and handling costs for the purchase purchase order")
}

interface PurchaseOrderItemInterface @doc(description: "Purchase order item details") {
    uid: ID! @doc(description: "The unique identifier of the purchase order item")
    product_name: String @doc(description: "The name of the base product")
    product_sku: String! @doc(description: "The SKU of the base product")
    product_url_key: String @doc(description: "URL key of the base product")
    product_sale_price: Money! @doc(description: "The sale price of the base product, including selected options")
    discounts: [Discount] @doc(description: "The final discount information for the product")
    selected_options: [PurchaseOrderItemOption] @doc(description: "The selected options for the base product, such as color or size")
    entered_options: [PurchaseOrderItemOption] @doc(description: "The entered option for the base product, such as a logo or image")
    quantity: Float! @doc(description: "The number of units for this item")
}

type PurchaseOrderItem implements PurchaseOrderItemInterface {

}

type PurchaseOrderBundleItem implements PurchaseOrderItemInterface {
    parent_product_sku: String! @doc(description: "SKU of the bundle itself")
    parent_product_quantity: Float! @doc(description: "Quantity of the bundle itself")
}

type PurchaseOrderItemOption @doc(description: "Represents purcahse order item options") {
    uid: ID! @doc(description: "The unique ID of the option")
    label: String! @doc(description: "The label of the option")
    value: String! @doc(description: "The value of the option")
    sort_order: Int! @doc(description: "The sort order of the option")
}

enum PurchaseOrderStatus {
    PENDING
    APPROVAL_REQUIRED
    APPROVED
    ORDER_IN_PROGRESS
    ORDER_PLACED
    ORDER_FAILED
    REJECTED
    CANCELED
}

type CustomerAddress {
    # This field must be added to the CustomerAddress type definition directly in CustomerGraphQl module
    country: Country @doc(description: "The customer's country")
}

input CartItemInput {
    # This field must be added to the CartItemInput type definition directly in QuoteGraphQl module
    parent_quantity: Float @doc(description: "Parent quantity can be used when adding complex product to cart. For example bundle products")
}
